.custom-close-button {
  position: fixed;
  top: 1rem;
  right: 1rem;
  z-index: 9999;
  background: transparent;
  border: none;
  padding: 0.5rem 1rem;
  cursor: pointer;
  font-size: 0.625rem;
  font-weight: 500;
  letter-spacing: 0.05em;
  text-transform: uppercase;
  color: rgba(255, 255, 255, 0.6);
  transition: color 0.2s ease, opacity 0.6s ease 0.2s;
  overflow: visible;
  will-change: auto;
  pointer-events: auto;
  opacity: 1;
}

/* Tablet and up */
@media (min-width: 640px) {
  .custom-close-button {
    top: 1.25rem;
    right: 1.25rem;
    padding: 0.625rem 1.25rem;
    font-size: 0.75rem;
  }
}

/* Desktop and up */
@media (min-width: 1024px) {
  .custom-close-button {
    top: 1.5rem;
    right: 1.5rem;
    padding: 0.75rem 1.5rem;
    font-size: 0.875rem;
  }
}

.custom-close-button.closing {
  opacity: 0;
}

.custom-close-button:hover {
  color: rgba(255, 255, 255, 1);
}

.close-text {
  position: relative;
  z-index: 9999;
  pointer-events: none;
}

/* Filter overlay that appears on hover */
.filter-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background-color: rgba(0, 0, 0, 0.7);
  will-change: auto;
  /* Important: avoid transforms here so fixed children (overlays) are viewport-relative */
  backdrop-filter: blur(4px);
  opacity: 0;
  transition: opacity 0.3s ease;
  pointer-events: none;
  z-index: 9997;
}

.filter-overlay.active {
  opacity: 1;
}

.filter-overlay.closing {
  opacity: 0;
  transition: opacity 0.6s ease 0.2s;
}

/* Cross container */
.cross-container {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 40vw;
  height: 40vh;
  pointer-events: none;
  z-index: 9998;
  transition: opacity 0.3s ease;
}

.cross-container.fade-out {
  opacity: 0;
}

.cross-container.closing {
  opacity: 0;
  transform: translate(-50%, -50%);
}

/* Individual cross bars - much longer and larger using percentages */
.cross-bar {
  position: absolute;
  width: 20vw;
  /* Responsive thickness: clamp ensures a minimum px and grows with viewport height but caps on very large screens */
  height: clamp(20px, 6vh, 44px);
  background-color: rgb(255, 255, 255);
  top: 50%;
  left: 50%;
  opacity: 0;
  visibility: hidden;
  transition: opacity 0.4s ease, background-color 0.3s ease;
}


/* Slightly adjust width and thickness at larger breakpoints for desktop */
@media (min-width: 300px) {
  .cross-bar {
    width: 14vw;
    height: clamp(10px, 2.6vh, 18px);
  }
}

@media (min-width: 800px) {
  .cross-bar {
    width: 14vw;
    height: clamp(18px, 4vh, 30px);
  }
}

@media (min-width: 1020px) {
  .cross-bar {
    width: 15vw;
    height: clamp(20px, 4.4vh, 36px);
  }
}

/* Brighten bars when closing */
.cross-container.closing .cross-bar {
  background-color: rgba(255, 255, 255, 1);
  opacity: 1;
}

.cross-bar.visible {
  opacity: 1 !important;
}

/* First bar - diagonal line at 45deg */
.cross-bar.bar-1 {
  transform: translate(-50%, -50%) rotate(45deg);
  clip-path: inset(0 100% 0 0);
}

.cross-bar.bar-1.animate {
  visibility: visible;
  animation: revealBar1 0.6s ease-out forwards !important;
}

/* Second bar - diagonal line at -45deg */
.cross-bar.bar-2 {
  transform: translate(-50%, -50%) rotate(-45deg);
  clip-path: inset(0 100% 0 0);
}

.cross-bar.bar-2.animate {
  visibility: visible;
  animation: revealBar2 0.6s ease-out 0.15s forwards !important;
}

/* Reveal first bar using clip-path - draws from left to right */
@keyframes revealBar1 {
  0% {
    clip-path: inset(0 100% 0 0);
    opacity: 1;
  }
  100% {
    clip-path: inset(0 0 0 0);
    opacity: 1;
  }
}

/* Reveal second bar using clip-path - draws from left to right */
@keyframes revealBar2 {
  0% {
    clip-path: inset(0 100% 0 0);
    opacity: 1;
  }
  100% {
    clip-path: inset(0 0 0 0);
    opacity: 1;
  }
}

/* Fade out animation when hover ends */
@keyframes fadeOutBar {
  0% {
    clip-path: inset(0 0 0 0);
    opacity: 1;
  }
  100% {
    clip-path: inset(0 100% 0 0);
    opacity: 0;
  }
}
